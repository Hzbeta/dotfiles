#!/bin/zsh

# lanuch tmux if it is not running
is_zsh_profile_debug || [ "$ZSH_AUTO_TMUX" != "false" ] && if command -v tmux &> /dev/null && [ -z $TMUX ]; then
  if [[ ! "$TERM_PROGRAM" == "vscode" ]]; then
    tmux_session_name=" main"
    exec tmux new-session -A -s "$tmux_session_name"
  # else
  #   tmux_session_name="󰨞 $(pwd | awk '{gsub(/\./, "_"); print}')"
  #   if tmux has-session -t "$tmux_session_name" 2>/dev/null; then
  #     # create a new window
  #     tmux new-window -t "$tmux_session_name"
  #   fi
  #   exec tmux new-session -A -s "$tmux_session_name"
  fi
fi

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
is_zsh_profile_debug || if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  # shellcheck source=/dev/null
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Source .profile to add some program to PATH
debug_log "source ~/.profile"
[[ -e ~/.profile ]] && emulate sh -c 'source ~/.profile'

# https://github.com/microsoft/vscode/issues/153400
# Add a vscode degraded shell integration for p10k
if [[ "$TERM_PROGRAM" == "vscode" ]]; then
# shellcheck disable=SC2034
  ITERM_SHELL_INTEGRATION_INSTALLED="Yes"
fi

# Zi init
if [[ ! -r "${XDG_CONFIG_HOME:-${HOME}/.config}/zi/init.zsh" ]]; then
  sh -c "$(wget -qO- https://get.zshell.dev)" -- -a loader
fi
# shellcheck source=/dev/null
source "${XDG_CONFIG_HOME:-${HOME}/.config}/zi/init.zsh"
zzinit
debug_log "zi initiated"

# >>>>> zi plugins >>>>>
# >>>>>>>>>>>>>>>>>>>>>>

# Meta, used for p10k to skip its setup on initialization
zi for \
  z-shell/z-a-meta-plugins \
    @romkatv  # for p10k

# Plugins need to load immediately
# if OMZL::history.zsh are lazy loaded,         the history will show incomplete
zi for \
  OMZL::history.zsh \

# Some lazy load plugins
zi wait lucid for \
  atinit'zicompinit; zicdreplay' \
    z-shell/F-Sy-H \
  atload'!_zsh_autosuggest_start' \
    zsh-users/zsh-autosuggestions \
  atload"bindkey '^[[A' history-substring-search-up; bindkey '^[[B' history-substring-search-down;" \
    zsh-users/zsh-history-substring-search \
  has'tmux' atload'omt install -s' \
    Hzbeta/omt-manager \
  zpm-zsh/ls \
  OMZP::extract \
  OMZP::sudo \
  OMZP::command-not-found \

# Some fzf related plugins
# https://github.com/junegunn/fzf
# with fzf-history-search, you can use ctrl+r to search history
zi wait lucid has'fzf' for \
  b4b4r07/enhancd \
  atinit'zicompinit' \
    Aloxaf/fzf-tab \
  joshskidmore/zsh-fzf-history-search \

# Auto change node version base on .nvmrc file
# https://github.com/lukechilds/zsh-nvm
export NVM_AUTO_USE=true
zi wait lucid has'pnpm' for \
  lukechilds/zsh-nvm \

# Completions
# Should run 'zicompinit; zicdreplay' after the last completion is loaded

# As completion
zi wait lucid blockf as'completion' for \
  mv'chezmoi.zsh -> _chezmoi' has'chezmoi' \
    https://github.com/twpayne/chezmoi/blob/master/completions/chezmoi.zsh \
  atload'zicompinit; zicdreplay' \
    zsh-users/zsh-completions \

zi wait lucid blockf for \
  atload"zpcdreplay" atclone"./zplug.zsh" atpull"%atclone" \
    g-plane/pnpm-shell-completion

debug_log "zi plugins loaded"
# <<<<<<<<<<<<<<<<<<<<<<<<<<
# <<<<< zi plugins end <<<<<

# >>> key bindings start >>>
# >>>>>>>>>>>>>>>>>>>>>>>>>>
# Some key bindings from `Oh My Zsh`
# Make sure that the terminal is in application mode when zle is active, since
# only then values from $terminfo are valid
if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )); then
  function zle-line-init() {
    echoti smkx
  }
  function zle-line-finish() {
    echoti rmkx
  }
  zle -N zle-line-init
  zle -N zle-line-finish
fi

# Use emacs key bindings
bindkey -e

# Start typing + [Up-Arrow] - fuzzy find history forward
if [[ -n "${terminfo[kcuu1]}" ]]; then
  autoload -U up-line-or-beginning-search
  zle -N up-line-or-beginning-search
  bindkey "${terminfo[kcuu1]}" up-line-or-beginning-search
fi
# Start typing + [Down-Arrow] - fuzzy find history backward
if [[ -n "${terminfo[kcud1]}" ]]; then
  autoload -U down-line-or-beginning-search
  zle -N down-line-or-beginning-search
  bindkey "${terminfo[kcud1]}" down-line-or-beginning-search
fi
# [Home] - Go to beginning of line
if [[ -n "${terminfo[khome]}" ]]; then
  bindkey "${terminfo[khome]}" beginning-of-line
fi
# [End] - Go to end of line
if [[ -n "${terminfo[kend]}" ]]; then
  bindkey "${terminfo[kend]}"  end-of-line
fi
# [Ctrl-e] Edit the current command line in $EDITOR
autoload -U edit-command-line
zle -N edit-command-line
bindkey '\C-e' edit-command-line

# Some key bindings that don't need to autoload functions
bindkey '^[[3;5~' kill-word                   # [Ctrl-Delete] - delete whole forward-word
bindkey '^[[1;5C' forward-word                # [Ctrl-RightArrow] - move forward one word
bindkey '^[[1;5D' backward-word               # [Ctrl-LeftArrow] - move backward one word
bindkey ' ' magic-space                       # [Space] - don't do history expansion
# <<<<<<<<<<<<<<<<<<<<<<<<
# <<< key bindings end <<<

# Misc settings
# for enhancd
if command -v fzf &> /dev/null && command -v lsd &> /dev/null; then
  export ENHANCD_FILTER="fzf --preview 'lsd --tree --depth 1 --icon=always --color=always --group-dirs first --header {}' --preview-window right,40% --height 50% --reverse"
fi
# for fzf
export FZF_DEFAULT_OPTS='--height 50% --layout=reverse'

# Costom alias
alias czm='chezmoi'
alias cl='clear'
alias aria2d='aria2c -s 8 -x 8 -k 1M -c' # aria2c download with 5 connections, 1M chunk size and continue download

# Custom functions
# aria2c download without proxy
if command -v aria2c >/dev/null 2>&1; then
  function aria2dnp() {
    tmp_http_proxy=$http_proxy
    tmp_https_proxy=$https_proxy
    tmp_all_proxy=$ALL_PROXY

    unset http_proxy
    unset https_proxy
    unset ALL_PROXY

    aria2c -s 8 -x 8 -k 1M -c "$@"

    export http_proxy=$tmp_http_proxy
    export https_proxy=$tmp_https_proxy
    export ALL_PROXY=$tmp_all_proxy
  }
fi

# use Q to quit and cd to the last dir
if command -v joshuto >/dev/null 2>&1; then
  jo() {
    joshuto --output-file /tmp/joshutodir
    if [ $? -eq 101 ] && [ -f /tmp/joshutodir ]; then 
      LASTDIR=`cat /tmp/joshutodir`
      rm -f /tmp/joshutodir 2>/dev/null
      if [ -d "$LASTDIR" ]; then 
        cd "$LASTDIR"
      fi
      unset LASTDIR
    fi
  }
fi

# clear the env
unset ZSH_PROFILE_DEBUG
unfunction is_zsh_profile_debug
unfunction debug_log